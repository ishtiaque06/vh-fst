class FST:
    """
    Finite State Transducer.

    This is class to transform strings in a formal language to a potentially different ones
    given a set of states and transitions. This is quite the general-purpose FST,
    and is designed to work with any language given the parameters in :code:`__init__` method.

    The target of this project is to use this FST to computationally model vowel-harmony patterns.

    *Notes.* Even though it's not much more than a general-purpose FST, its optional attributes
    :code:`left_subseq`, :code:`preprocess_req` and :code:`postprocess_req`
    are tied to the :code:`preprocess` and :code:`postprocess` functions in the :code:`processors.py`
    module. These are optional because they might not be necessary when this FST
    instance is generated using SPE rules.
    """

    def __init__(self, language):
        """
            Object initialization method.

            * Input: :code:`<dict>`: Takes in a dictionary containing following attributes:
                * Required attributes:
                    * :code:`states``:  :code:`<dict>` of tuples: (state_label, string_to_attach)
                    * :code:`alphabet`: :code:`<dict>` of relevant letters in the language (most likely vowels)
                    * :code:`transitions`: :code:`<dict>` (start_state, input_string, output_string, next_state)
                    * :code:`name`: :code:`<str>` Name of the FST instance
                * Optional attributes:
                    * :code:`left_subseq`: :code:`<boolean>` (Is the FST left-subsequential? If not, right sub)
                    * :code:`preprocess_req`: :code:`<boolean>` Preprocessing required on input?
                    * :code:`postprocess_req`: :code:`<boolean>` Postprocessing required on input?
                    * :code:`spe_generated`: :code:`<boolean>` If this is False then the string associated with
                      the last state is added to the final output.
                    * :code:`notes`: :code:`<list<str>>` Notes regarding a VH pattern the user should know.
                    * :code:`hyphenate_suffix`: :code:`<boolean>` Indicates whether the VH pattern requires
                      demarkation of suffixes.
            * Output: :code:`<None>`

        """

        self.name = language['name']
        self.states =  language['states']
        self.alphabet = language['alphabet']
        self.transitions = language['transitions']
        self.hyphenate_suffix = language.get('hyphenate_suffix', None)
        self.notes = language.get('notes', None)
        self.left_subseq = language.get('left_subseq', None)
        self.preprocess_req = language.get('preprocess_req', None)
        self.postprocess_req = language.get('postprocess_req', None)
        self.spe_generated = language.get('spe_generated', None)

    def step(self, word_as_list):
        """
            Runs the FST given a word represented as a list.

            * Input: :code:`<list>`: input word
            * Output: :code:`<list>`: final word (before postprocessing) after
              transitions have been applied.
        """

        if word_as_list == []:
            return []
        output_list = []
        current_state = 0
        while word_as_list:
            letter = word_as_list[0]
            if letter not in self.alphabet:
                letter = '?'
            output_letter, next_state = self.transitions[(current_state, letter)]
            current_state = next_state
            if '?' in output_letter:
                output_list.append(output_letter.replace("?", word_as_list[0]))
            else:
                output_list.append(output_letter)
            word_as_list = word_as_list[1:]
        # Append the last state's string to the final word
        '''
            The following blocks of code are required because if the FST has been
            generated by an SPE rule, the string in (state, string) tuple of
            the FST's state set doesn't need to be appended at the end of the step
            function, whereas it is required for VH patterns.
        '''
        spe_generated = getattr(self, 'spe_generated', None)
        if spe_generated in (None, False):
            output_list.append(self.states[current_state])

        return output_list
